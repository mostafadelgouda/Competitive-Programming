#include<bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define IO ios::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define pb push_back
using namespace std;

const ll inf = 1e18 + 5;
const ll N = 1e6 + 6;
const ll LG = 19;

ll n, q;
struct node{
	ll sum, lazy;
}tree[400005];

void prop(int p, int l, int r){
	tree[p].sum += (r - l + 1) * (tree[p].lazy);
	if(l != r){
		tree[p * 2 + 1].lazy += tree[p].lazy;
		tree[p * 2 + 2].lazy += tree[p].lazy;
	}
	tree[p].lazy = 0;
}
ll get(int p, int a, int b, int l = 0, int r = n - 1){
	prop(p, l, r);
	if(r < a || l > b) return 0;
	if(l >= a && r <= b) return tree[p].sum;
	int mid = (l + r) / 2;
	ll left = get(p * 2 + 1, a, b, l, mid);
	ll right = get(p * 2 + 2, a, b, mid + 1, r);
	return left + right;
}
void modify(int a, int b, int val, int p = 0, int l = 0, int r = n - 1){
	prop(p, l, r);
	if(b < l || a > r) return;
	if(a <= l && b >= r){
		tree[p].lazy += val;
		prop(p, l, r);
		return;
	}
	int mid = (l + r) / 2;
	modify(a, b, val, p * 2 + 1, l, mid);
	modify(a, b, val, p * 2 + 2, mid + 1, r);
	tree[p].sum = tree[p * 2 + 1].sum + tree[p * 2 + 2].sum;
}
int main()
{
#ifndef ONLINE_JUDGE
	freopen("out.txt","w",stdout);
	freopen("in.txt","r",stdin);
#else
#endif
	
	int t;
	scanf("%d", &t);
	while(t--){
		scanf("%lld%lld", &n, &q);
		for(int i = 0 ; i <= 400000 ; i++){
			tree[i].sum = tree[i].lazy = 0;
		}
		while(q--){
			ll l, r, ch, val;
			scanf("%lld%lld%lld", &ch, &l, &r);
			if(ch == 0){
				scanf("%lld", &val);
				modify(l - 1, r - 1, val);
			}
			else{
				printf("%lld\n", get(0, l - 1, r - 1));
			}
		}
	}
	return 0;
}
